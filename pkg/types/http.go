package types

import (
	"context"
	"net/http"
)

type MethodOptions struct {
	IsStreamingResponse bool
}

// HandlerFunc defines a function for serving HTTP requests.
//
// Parameters
//
//	ctx:   The request-scoped context carrying deadlines, cancellation signals,
//	       and other metadata.
//	req:   The decoded HTTP request payload. Implementations should type-assert
//	       this to the expected struct for the endpoint.
//
// Returns
//
//	resp:  The response object to be encoded and sent back to the client.
//	err:   A non-nil error if the request could not be processed successfully.
type HandlerFunc func(context.Context, interface{}) (interface{}, error)

// HttpDecoder defines a function type for decoding HTTP requests into
// a Go value suitable for a handler.
//
// Parameters
//
//	ctx: The request-scoped context carrying deadlines, cancellation signals,
//	     and other metadata.
//	r:   The incoming HTTP request to decode.
//
// Returns
//
//	request: The decoded request object. Implementations should return a struct
//	         or value appropriate for the handler.
//	err:     A non-nil error if the request could not be decoded successfully.
type HttpDecoder func(ctx context.Context, r *http.Request) (request interface{}, err error)

// HttpEncoder defines a function type for encoding a response object
// into HTTP headers and a body suitable for sending to the client.
//
// Parameters
//
//	ctx:      The request-scoped context carrying deadlines, cancellation signals,
//	          and other metadata.
//	response: The response object returned by the handler to be encoded.
//
// Returns
//
//	headers: HTTP headers to be included in the response.
//	body:    The encoded response body as a byte slice.
//	err:     A non-nil error if the response could not be encoded successfully.
type HttpEncoder func(ctx context.Context, response interface{}) (headers map[string][]string, body []byte, err error)

// HttpRequestMiddleware defines a function type for processing or transforming
// incoming HTTP requests before they reach the handler.
//
// Parameters
//
//	ctx:             The request-scoped context carrying deadlines, cancellation signals,
//	                 and other metadata.
//	incomingRequest: The decoded request object received from the client.
//
// Returns
//
//	outgoingContext: The context to be passed to the handler, potentially updated.
//	outgoingRequest: The request object to be passed to the handler, potentially transformed.
//	err:             A non-nil error if the middleware fails and the request
//	                 should not be processed further.
type HttpRequestMiddleware func(ctx context.Context, incomingRequest interface{}) (outgoingContext context.Context, outgoingRequest interface{}, err error)

// HttpResponseMiddleware defines a function type for processing or transforming
// the response object after it has been generated by the handler but before
// it is encoded and sent to the client.
//
// Parameters
//
//	ctx:              The request-scoped context carrying deadlines, cancellation signals,
//	                  and other metadata.
//	incomingResponse: The response object returned by the handler.
//
// Returns
//
//	outgoingResponse: The response object to be sent to the client, potentially modified.
//	err:              A non-nil error if the middleware fails and the response
//	                  should not be sent.
type HttpResponseMiddleware func(ctx context.Context, incomingResponse interface{}) (outgoingResponse interface{}, err error)

type RateLimitOptions struct {
	Limit                   int    // number of requests allowed in the given duration
	BucketDurationInSeconds int64  // duration in seconds for which the limit is applicable
	ContextKey              string // key in context which will be checked for rate limiting
}

type WebSocketOption struct {
	AllowedOrigins []string
}

type WebsocketHandlerFunc func(context.Context) error
